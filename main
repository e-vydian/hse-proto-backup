import React, { useState, useEffect, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { 
    getAuth, 
    signInAnonymously, 
    onAuthStateChanged,
    signInWithCustomToken
} from 'firebase/auth';
import { 
    getFirestore, 
    collection, 
    addDoc, 
    onSnapshot,
    doc,
    updateDoc,
    deleteDoc,
    query,
    setDoc,
    setLogLevel,
    arrayUnion,
    arrayRemove,
    serverTimestamp
} from 'firebase/firestore';
import { Clock, User, Building, Briefcase, PlusCircle, CheckCircle, AlertTriangle, Trash2, Calendar, Users, ClipboardList, LogIn, ShieldCheck, FileText, UploadCloud, LogOut, UserCog, Send, FileSignature, FileDown, DollarSign, FileSpreadsheet, Sparkles, X, Menu, Eye, XCircle, Globe, Edit, Copy, Wrench } from 'lucide-react';

// --- Firebase Configuration ---
const firebaseConfig = typeof __firebase_config !== 'undefined' 
    ? JSON.parse(__firebase_config) 
    : { apiKey: "your-fallback-api-key", authDomain: "your-fallback-auth-domain", projectId: "your-fallback-project-id" };

const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-staffing-app';

// --- MOCK USER DATA (for login simulation) ---
const MOCK_USERS = {
    'architect@staffing.os': { role: 'architect', name: 'System Architect' },
    'superadmin@staffing.os': { role: 'super_admin', name: 'Super Admin' },
    'admin@staffing.os': { role: 'admin', name: 'Admin User' },
    'facility_gh@staffing.os': { role: 'facility', name: 'General Hospital', entityId: 'facility_01' },
    'facility_umc@staffing.os': { role: 'facility', name: 'University Medical Center', entityId: 'facility_03' },
    'prof_jd@staffing.os': { role: 'professional', name: 'Jane Doe', entityId: 'prof_01' },
    'prof_ts@staffing.os': { role: 'professional', name: 'Tom Smith', entityId: 'prof_02' },
    'prof_cr@staffing.os': { role: 'professional', name: 'Carlos Ray', entityId: 'prof_03' },
    'prof_mg@staffing.os': { role: 'professional', name: 'Maria Garcia', entityId: 'prof_04' },
    'prof_dc@staffing.os': { role: 'professional', name: 'David Chen', entityId: 'prof_05' },
    'prof_as@staffing.os': { role: 'professional', name: 'Alice Smith', entityId: 'prof_06'},
    'prof_bw@staffing.os': { role: 'professional', name: 'Ben Williams', entityId: 'prof_07'},
    'applicant_sl@staffing.os': { role: 'pending_professional', name: 'Susan Lee', entityId: 'prof_new_02' }
};


// --- Main Application Component (The Router) ---
export default function App() {
    const [view, setView] = useState('homepage');
    const [portalAction, setPortalAction] = useState('login');

    const handleNavigation = (targetView, action = 'login') => {
        setPortalAction(action);
        setView(targetView);
    };
    
    useEffect(() => {
        const link = document.createElement('link');
        link.href = "https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap";
        link.rel = 'stylesheet';
        document.head.appendChild(link);
    }, []);

    switch(view) {
        case 'portal':
            return <PortalLayout initialAction={portalAction} onExitPortal={() => setView('homepage')} />;
        case 'job_board':
            return <PublicJobMarketplace onEnterPortal={handleNavigation} onExit={() => setView('homepage')} />;
        case 'homepage':
        default:
            return <HomepageLayout onEnterPortal={handleNavigation} />;
    }
}


// --- HOMEPAGE COMPONENTS ("Front of House") ---

const HomepageLayout = ({ onEnterPortal }) => (
    <div className="bg-gray-50 text-gray-800" style={{fontFamily: "'Montserrat', sans-serif"}}>
        <HomepageHeader onEnterPortal={onEnterPortal} />
        <main>
            <HeroSection onEnterPortal={onEnterPortal} />
            <FacilitiesSection />
            <ProfessionalsSection />
            <JobListingSection onEnterPortal={onEnterPortal} />
            <ContactSection />
        </main>
        <HomepageFooter />
    </div>
);

const HomepageHeader = ({ onEnterPortal }) => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    return (
        <header className="bg-white shadow-md sticky top-0 z-50">
            <nav className="container mx-auto px-6 py-2 flex justify-between items-center">
                <div className="flex items-center">
                    <img src="https://i.imgur.com/O6G35x7.png" alt="HSE Staffing Agency Logo" className="h-14" />
                </div>
                <div className="hidden md:flex items-center space-x-8">
                    <a href="#home" className="text-gray-600 hover:text-blue-800 transition">Home</a>
                    <a href="#facilities" className="text-gray-600 hover:text-blue-800 transition">For Facilities</a>
                    <a href="#professionals" className="text-gray-600 hover:text-blue-800 transition">For Professionals</a>
                    <button onClick={() => onEnterPortal('job_board')} className="text-gray-600 hover:text-blue-800 transition">Job Board</button>
                    <a href="#contact" className="text-gray-600 hover:text-blue-800 transition">Contact Us</a>
                </div>
                <button onClick={() => onEnterPortal('portal', 'login')} className="hidden md:inline-block bg-blue-800 text-white font-semibold px-5 py-2 rounded-lg hover:bg-blue-900 transition shadow-sm">HSE OS Portal</button>
                <button onClick={() => setIsMenuOpen(!isMenuOpen)} className="md:hidden"><Menu className="h-6 w-6" /></button>
            </nav>
            {isMenuOpen && (
                <div className="md:hidden px-6 pb-4">
                    <a href="#home" className="block py-2 text-gray-600 hover:text-blue-800">Home</a>
                    <a href="#facilities" className="block py-2 text-gray-600 hover:text-blue-800">For Facilities</a>
                    <a href="#professionals" className="block py-2 text-gray-600 hover:text-blue-800">For Professionals</a>
                    <button onClick={() => onEnterPortal('job_board')} className="block text-left w-full py-2 text-gray-600 hover:text-blue-800">Job Board</button>
                    <a href="#contact" className="block py-2 text-gray-600 hover:text-blue-800">Contact Us</a>
                    <button onClick={() => onEnterPortal('portal', 'login')} className="w-full mt-2 bg-blue-800 text-white font-semibold px-5 py-2 rounded-lg hover:bg-blue-900 transition shadow-sm">HSE OS Portal</button>
                </div>
            )}
        </header>
    );
};

const HeroSection = ({ onEnterPortal }) => (
    <section id="home" className="text-white" style={{ backgroundImage: `linear-gradient(rgba(0, 51, 102, 0.75), rgba(0, 51, 102, 0.75)), url('https://images.unsplash.com/photo-1576091160550-2173dba999ef?q=80&w=2070&auto=format&fit=crop')`, backgroundSize: 'cover', backgroundPosition: 'center' }}>
        <div className="container mx-auto px-6 py-24 md:py-32 text-center">
            <h2 className="text-4xl md:text-6xl font-bold mb-4">Connecting Talent with Opportunity</h2>
            <p className="text-lg md:text-xl max-w-3xl mx-auto mb-8 text-blue-100">Your trusted partner in healthcare staffing. We provide reliable, qualified professionals for facilities and fulfilling career opportunities for staff.</p>
            <div className="flex flex-col sm:flex-row justify-center items-center gap-4">
                <a href="#facilities" className="bg-amber-400 text-blue-900 font-semibold px-8 py-3 rounded-lg hover:bg-amber-500 transition shadow-lg w-full sm:w-auto">Find Staff</a>
                <button onClick={() => onEnterPortal('portal', 'signup')} className="bg-transparent border-2 border-amber-400 text-amber-400 font-semibold px-8 py-3 rounded-lg hover:bg-amber-400 hover:text-blue-900 transition w-full sm:w-auto">Find Work</button>
            </div>
        </div>
    </section>
);

const InfoCard = ({ icon, title, children }) => (
    <div className="text-center p-8 bg-gray-50 rounded-lg shadow-sm hover:shadow-lg transition-shadow duration-300">
        <div className="flex justify-center items-center h-16 w-16 bg-blue-100 text-blue-800 mx-auto mb-4 rounded-full">{icon}</div>
        <h4 className="text-xl font-semibold mb-2 text-blue-900">{title}</h4>
        <p className="text-gray-600">{children}</p>
    </div>
);

const FacilitiesSection = () => (
    <section id="facilities" className="py-20 bg-white">
        <div className="container mx-auto px-6">
            <div className="text-center mb-12"><h3 className="text-4xl font-bold text-blue-900 mb-2">For Healthcare Facilities</h3><p className="text-lg text-gray-600 max-w-2xl mx-auto">Streamline your staffing process and ensure quality patient care.</p></div>
            <div className="grid md:grid-cols-3 gap-8">
                <InfoCard icon={<ShieldCheck size={32} />} title="Vetted Professionals">Gain access to a pool of highly qualified and pre-screened healthcare professionals whose credentials have been thoroughly verified.</InfoCard>
                <InfoCard icon={<Clock size={32} />} title="Efficient Scheduling">Post open shifts in seconds, view applicants in real-time, and fill positions with a single click through our intuitive portal.</InfoCard>
                <InfoCard icon={<FileSignature size={32} />} title="Automated Admin">Simplify your back-office with automated timesheet approvals and streamlined invoicing, saving you valuable time and resources.</InfoCard>
            </div>
        </div>
    </section>
);

const ProfessionalsSection = () => (
     <section id="professionals" className="py-20 bg-blue-50">
        <div className="container mx-auto px-6">
            <div className="text-center mb-12"><h3 className="text-4xl font-bold text-blue-900 mb-2">For Healthcare Professionals</h3><p className="text-lg text-gray-600 max-w-2xl mx-auto">Find flexible work that fits your life and advance your career.</p></div>
            <div className="grid md:grid-cols-3 gap-8">
                <InfoCard icon={<Briefcase size={32} />} title="Find Your Next Shift">Browse live job listings from top healthcare facilities and apply instantly to shifts that match your specialty and schedule.</InfoCard>
                <InfoCard icon={<User size={32} />} title="Manage Your Career">Use your personal portal to upload credentials, manage your profile, and track your schedule and timesheets all in one place.</InfoCard>
                <InfoCard icon={<DollarSign size={32} />} title="Reliable Payments">Submit digital timesheets with ease and get paid accurately and on time through our integrated, streamlined payroll system.</InfoCard>
            </div>
        </div>
    </section>
);

const JobListingSection = ({ onEnterPortal }) => (
    <section id="jobs" className="py-20 bg-white">
        <div className="container mx-auto px-6">
            <div className="text-center mb-12"><h3 className="text-4xl font-bold text-blue-900 mb-2">Live Job Listings</h3><p className="text-lg text-gray-600">New opportunities are posted daily. Apply now!</p></div>
            <div className="text-center mt-8"><button onClick={() => onEnterPortal('job_board')} className="text-blue-800 font-semibold hover:underline">View All Openings &rarr;</button></div>
        </div>
    </section>
);

const ContactSection = () => (
    <section id="contact" className="py-20 bg-blue-900 text-white">
        <div className="container mx-auto px-6 text-center">
            <h3 className="text-4xl font-bold mb-4">Ready to Get Started?</h3>
            <p className="text-lg max-w-2xl mx-auto mb-8">Whether you're looking to fill a critical shift or find your next opportunity, we're here to help. Contact us today!</p>
            <a href="mailto:contact@hsestaffingagency.com" className="bg-amber-400 text-blue-900 font-bold px-10 py-4 rounded-lg hover:bg-amber-500 transition text-lg shadow-lg">Contact Us</a>
        </div>
    </section>
);

const HomepageFooter = () => (
     <footer className="bg-white py-8 border-t">
        <div className="container mx-auto px-6 text-center text-gray-600">
            <p>&copy; 2025 HSE Staffing Agency. All Rights Reserved.</p>
        </div>
    </footer>
);

const PublicJobMarketplace = ({ onEnterPortal, onExit }) => {
    const [shifts, setShifts] = useState([]);
    const [filters, setFilters] = useState({ specialty: '', date: ''});

    useEffect(() => {
        const db = getFirestore(initializeApp(firebaseConfig));
        const q = query(collection(db, `artifacts/${appId}/public/data/shifts`));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            setShifts(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
        });
        return () => unsubscribe();
    }, []);

    const filteredShifts = useMemo(() => {
        return shifts.filter(shift => {
            const specialtyMatch = filters.specialty ? shift.specialty === filters.specialty : true;
            const dateMatch = filters.date ? shift.shiftDate === filters.date : true;
            return specialtyMatch && dateMatch;
        });
    }, [shifts, filters]);

    return (
        <div className="bg-gray-50 min-h-screen" style={{fontFamily: "'Montserrat', sans-serif"}}>
            <header className="bg-white shadow-md">
                <nav className="container mx-auto px-6 py-4 flex justify-between items-center">
                     <button onClick={onExit} className="text-gray-600 hover:text-blue-800 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2"><path d="m15 18-6-6 6-6"/></svg>
                        Back to Home
                    </button>
                    <h1 className="text-2xl font-bold text-blue-900">Job Marketplace</h1>
                    <Button onClick={() => onEnterPortal('portal', 'login')}>Portal Login</Button>
                </nav>
            </header>
            <main className="container mx-auto p-6">
                <Card className="mb-6">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <Label>Filter by Specialty</Label>
                            <Select value={filters.specialty} onChange={e => setFilters({...filters, specialty: e.target.value})}>
                                <option value="">All Specialties</option>
                                <option>RN</option>
                                <option>LPN</option>
                                <option>CNA</option>
                            </Select>
                        </div>
                        <div>
                            <Label>Filter by Date</Label>
                            <Input type="date" value={filters.date} onChange={e => setFilters({...filters, date: e.target.value})}/>
                        </div>
                         <div className="self-end">
                            <Button variant="outline" onClick={() => setFilters({specialty: '', date: ''})} className="w-full">Clear Filters</Button>
                         </div>
                    </div>
                </Card>
                <div className="space-y-4">
                    {filteredShifts.length > 0 ? filteredShifts.map(shift => (
                        <Card key={shift.id}>
                            <ShiftListItem shift={shift} />
                             <div className="mt-4 pt-4 border-t">
                                <h4 className="font-semibold text-sm mb-2">Requirements</h4>
                                <div className="flex flex-wrap gap-2">
                                    {(shift.requiredCredentials || []).map(cred => <span key={cred} className="bg-gray-200 text-gray-700 text-xs font-semibold px-2 py-1 rounded-full">{cred}</span>)}
                                </div>
                                <div className="mt-4">
                                     <Button onClick={() => onEnterPortal('portal', 'signup')}>Apply Now</Button>
                                </div>
                            </div>
                        </Card>
                    )) : <p className="text-center text-gray-500 py-10">No open shifts match your criteria.</p>}
                </div>
            </main>
        </div>
    );
}

// --- PORTAL COMPONENTS ("Back of House") ---

const PortalLayout = ({ initialAction, onExitPortal }) => {
    const [currentUser, setCurrentUser] = useState(null);
    const [isLoginView, setIsLoginView] = useState(initialAction === 'login');
    const [db, setDb] = useState(null);
    const [isAuthReady, setIsAuthReady] = useState(false);
    const [professionals, setProfessionals] = useState([]);
    const [facilities, setFacilities] = useState([]);
    const [shifts, setShifts] = useState([]);
    const [credentialTypes, setCredentialTypes] = useState([]);
    const [specialtyTypes, setSpecialtyTypes] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        try {
            setLogLevel('debug');
            const app = initializeApp(firebaseConfig);
            const authInstance = getAuth(app);
            const dbInstance = getFirestore(app);
            setDb(dbInstance);

            const unsubscribeAuth = onAuthStateChanged(authInstance, async (user) => {
                if (!user) {
                     if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {
                        await signInWithCustomToken(authInstance, __initial_auth_token);
                    } else {
                        await signInAnonymously(authInstance);
                    }
                }
                setIsAuthReady(true);
            });
            return () => unsubscribeAuth();
        } catch (e) {
            console.error("Portal Firebase Init Error:", e);
            setError("Failed to connect to portal services.");
            setIsLoading(false);
        }
    }, []);
    
    // Setup Mock Data
    useEffect(() => {
        if (!db || !isAuthReady) return;
        const setupMockData = async () => {
             const now = new Date();
             const audit = { createdAt: now.toISOString(), createdBy: 'System', lastModifiedAt: now.toISOString(), lastModifiedBy: 'System' };
             
             await setDoc(doc(db, `artifacts/${appId}/public/data/facilities`, 'facility_01'), { name: 'General Hospital', address: '123 Health St, Anytown', ...audit }, { merge: true });
             await setDoc(doc(db, `artifacts/${appId}/public/data/facilities`, 'facility_02'), { name: 'City Clinic', address: '456 Wellness Ave, Metroville', ...audit }, { merge: true });
            
            const realisticCredentials = ['RN License (Utah)', 'LPN License (Utah)', 'CNA Certification (Utah)', 'BLS - Basic Life Support (AHA)', 'ACLS - Advanced Cardiac Life Support', 'PALS - Pediatric Advanced Life Support', 'TNCC - Trauma Nursing Core Course', 'NIHSS - Stroke Scale Certification', 'COVID-19 Vaccination Record'];
            realisticCredentials.forEach(async (credName, index) => {
                await setDoc(doc(db, `artifacts/${appId}/public/data/credentialTypes`, `ct_${index+1}`), { name: credName, ...audit }, { merge: true });
            });
            
            const realisticSpecialties = ['RN', 'LPN', 'CNA', 'Med Tech', 'RT'];
            realisticSpecialties.forEach(async (specName, index) => {
                 await setDoc(doc(db, `artifacts/${appId}/public/data/specialtyTypes`, `sp_${index+1}`), { name: specName, ...audit }, { merge: true });
            });


            const expirySoonDate = new Date(); expirySoonDate.setDate(now.getDate() + 15);
            const expiredDate = new Date(); expiredDate.setDate(now.getDate() - 15);

            await setDoc(doc(db, `artifacts/${appId}/public/data/professionals`, 'prof_01'), { name: 'Jane Doe', specialty: 'RN', role: 'professional', ...audit, credentials: [{docName: 'RN License (Utah)', expiryDate: '2026-12-31', status: 'Verified', verifiedBy: 'System', verifiedAt: now.toISOString()}] }, { merge: true });
            await setDoc(doc(db, `artifacts/${appId}/public/data/professionals`, 'prof_02'), { name: 'Tom Smith', specialty: 'CNA', role: 'professional', ...audit, credentials: [{docName: 'CNA Certification (Utah)', expiryDate: expiredDate.toISOString().split('T')[0], status: 'Verified', verifiedBy: 'System', verifiedAt: now.toISOString()}] }, { merge: true });
            await setDoc(doc(db, `artifacts/${appId}/public/data/professionals`, 'prof_06'), { name: 'Alice Smith', specialty: 'RN', role: 'professional', ...audit, credentials: [{docName: 'RN License (Utah)', expiryDate: '2025-11-30', status: 'Denied', denialReason: 'Uploaded document is blurry.', deniedBy: 'Admin User', deniedAt: now.toISOString()}] }, { merge: true });
            await setDoc(doc(db, `artifacts/${appId}/public/data/professionals`, 'prof_new_02'), { name: 'Susan Lee', specialty: '', role: 'pending_professional', onboardingStep: 1, credentials: [], ...audit }, { merge: true });

        };
        setupMockData();
    }, [db, isAuthReady]);


    useEffect(() => {
        if (!isAuthReady || !db) return;
        setIsLoading(true);
        const collections = { professionals: setProfessionals, facilities: setFacilities, shifts: setShifts, credentialTypes: setCredentialTypes, specialtyTypes: setSpecialtyTypes };
        const unsubscribers = Object.entries(collections).map(([name, setter]) => 
            onSnapshot(query(collection(db, `artifacts/${appId}/public/data/${name}`)), 
                (snapshot) => {
                    setter(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
                    setIsLoading(false);
                },
                (err) => {
                    console.error(`Error fetching ${name}:`, err);
                    setError(`Could not load ${name}.`);
                    setIsLoading(false);
                }
            )
        );
        return () => unsubscribers.forEach(unsub => unsub());
    }, [isAuthReady, db]);
    

    const handleLogin = (email) => {
        const user = MOCK_USERS[email];
        if (user) setCurrentUser(user);
        else alert('User not found!');
    };
    
    const handleSignup = async (name, email) => {
        if(!db) return;
        const newUser = { name, contact: email, role: 'pending_professional', onboardingStep: 1, credentials: [], specialty: '', createdAt: new Date().toISOString(), createdBy: 'Public Signup' };
        const newDocRef = doc(collection(db, `artifacts/${appId}/public/data/professionals`));
        await setDoc(newDocRef, newUser);
        MOCK_USERS[email] = { role: 'pending_professional', name: name, entityId: newDocRef.id };
        alert('Signup successful! Please log in.');
        setIsLoginView(true);
    };
    
    const handleLogout = () => setCurrentUser(null);

    const renderPortalContent = () => {
        if (isLoading) return <div className="flex justify-center items-center h-screen"><LoadingSpinner /></div>;
        if (error) return <ErrorMessage message={error} />;
        if (!currentUser) {
            return (
                 <div className="min-h-screen bg-gray-100">
                    <button onClick={onExitPortal} className="absolute top-4 left-4 text-gray-600 hover:text-blue-800 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="mr-2"><path d="m15 18-6-6 6-6"/></svg>
                        Back to Homepage
                    </button>
                    <AuthScreen onLogin={handleLogin} onSignup={handleSignup} isLoginView={isLoginView} setIsLoginView={setIsLoginView} />
                </div>
            );
        }

        const portalTopBar = (
            <header className="bg-white shadow-sm p-4 flex justify-between items-center">
                <div className="flex items-center"> <img src="https://i.imgur.com/O6G35x7.png" alt="HSE OS Portal Logo" className="h-10" /></div>
                <div className="flex items-center">
                    <span className="text-gray-600 mr-4">Welcome, <span className="font-semibold">{currentUser.name}</span></span>
                    <Button onClick={handleLogout} variant="outline" size="sm"><LogOut className="mr-2 h-4 w-4" /> Logout</Button>
                </div>
            </header>
        );

        let roleSpecificView;
        const applicant = professionals.find(p => p.id === currentUser.entityId);

        switch (currentUser.role) {
            case 'architect': roleSpecificView = <ArchitectLayout currentUser={currentUser} db={db} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes} />; break;
            case 'super_admin': roleSpecificView = <SuperAdminLayout currentUser={currentUser} db={db} shifts={shifts} professionals={professionals} facilities={facilities} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes} />; break;
            case 'admin': roleSpecificView = <AdminLayout currentUser={currentUser} db={db} shifts={shifts} professionals={professionals} facilities={facilities} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes}/>; break;
            case 'facility': roleSpecificView = <FacilityLayout db={db} user={currentUser} allShifts={shifts} professionals={professionals} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes}/>; break;
            case 'professional': roleSpecificView = <ProfessionalLayout db={db} user={currentUser} allShifts={shifts} allProfessionals={professionals} />; break;
            case 'pending_professional': roleSpecificView = <OnboardingLayout db={db} applicant={applicant} specialtyTypes={specialtyTypes} />; break;
            default: roleSpecificView = <ErrorMessage message="Invalid user role." />;
        }
        
        return (
            <div className="bg-gray-50 font-sans" style={{fontFamily: "'Montserrat', sans-serif"}}>
                {portalTopBar}
                <div className="p-4 sm:p-6 lg:p-8">{roleSpecificView}</div>
            </div>
        );
    };

    return renderPortalContent();
};

const AuthScreen = ({ onLogin, onSignup, isLoginView, setIsLoginView }) => {
    const [email, setEmail] = useState('');
    const [name, setName] = useState('');

    const handleLoginSubmit = (e) => { e.preventDefault(); onLogin(email); };
    const handleSignupSubmit = (e) => { e.preventDefault(); onSignup(name, email); };

    return (
        <div className="flex items-center justify-center min-h-screen bg-gray-100" style={{fontFamily: "'Montserrat', sans-serif"}}>
            <div className="p-8 bg-white rounded-xl shadow-lg w-full max-w-md">
                <div className="flex justify-center mb-6"> <img src="https://i.imgur.com/O6G35x7.png" alt="HSE Staffing Agency Logo" className="h-16" /></div>
                <h2 className="text-2xl font-bold text-center text-blue-900 mb-2">
                    {isLoginView ? 'Welcome to HSE OS' : 'Join Our Team'}
                </h2>
                <p className="text-center text-gray-500 mb-8">
                    {isLoginView ? 'Sign in to the portal.' : 'Create an account to get started.'}
                </p>
                
                {isLoginView ? (
                    <form onSubmit={handleLoginSubmit} className="space-y-4">
                        <div><Label htmlFor="role-select">Select Login</Label><Select id="role-select" value={email} onChange={(e) => setEmail(e.target.value)}>{Object.entries(MOCK_USERS).map(([email, user]) => (<option key={email} value={email}>{user.name} ({user.role.replace(/_/g, ' ')})</option>))}</Select></div>
                        <Button type="submit" className="w-full" disabled={!email}><LogIn className="mr-2 h-4 w-4"/> Sign In</Button>
                    </form>
                ) : (
                    <form onSubmit={handleSignupSubmit} className="space-y-4">
                        <div><Label htmlFor="name">Full Name</Label><Input id="name" value={name} onChange={e => setName(e.target.value)} required /></div>
                        <div><Label htmlFor="email">Email Address</Label><Input id="email" type="email" value={email} onChange={e => setEmail(e.target.value)} required /></div>
                        <Button type="submit" className="w-full" disabled={!email || !name}><UserCog className="mr-2 h-4 w-4"/> Sign Up</Button>
                    </form>
                )}
                
                <div className="mt-6 text-center">
                    <button onClick={() => setIsLoginView(!isLoginView)} className="text-sm text-blue-800 hover:underline">
                        {isLoginView ? 'New professional? Sign up here.' : 'Already have an account? Sign in.'}
                    </button>
                </div>
            </div>
        </div>
    );
};
const ArchitectLayout = ({currentUser, db, credentialTypes, specialtyTypes}) => {
    const [view, setView] = useState('credential_types');
    const navItems = [
        { id: 'credential_types', icon: <FileText size={20}/>, label: 'Credential Types'},
        { id: 'specialty_types', icon: <Briefcase size={20}/>, label: 'Specialty Types' },
    ];
    const renderView = () => {
        switch(view) {
            case 'credential_types': return <CredentialTypesView currentUser={currentUser} credentialTypes={credentialTypes} db={db}/>;
            case 'specialty_types': return <SpecialtyTypesView currentUser={currentUser} specialtyTypes={specialtyTypes} db={db}/>;
            default: return <CredentialTypesView currentUser={currentUser} credentialTypes={credentialTypes} db={db}/>;
        }
    };
    return (<div className="flex flex-col md:flex-row"><AdminSidebar view={view} setView={setView} navItems={navItems} /><main className="flex-1 md:pl-8 mt-6 md:mt-0">{renderView()}</main></div>);
}
const SuperAdminLayout = ({ currentUser, db, shifts, professionals, facilities, credentialTypes, specialtyTypes }) => { const [view, setView] = useState('dashboard'); const navItems = [{ id: 'dashboard', icon: <ClipboardList size={20}/>, label: 'Dashboard' },{ id: 'applicants', icon: <UserCog size={20}/>, label: 'Applicants' },{ id: 'credentials', icon: <ShieldCheck size={20}/>, label: 'Verify Credentials' },{ id: 'shifts', icon: <Clock size={20}/>, label: 'Shifts' },{ id: 'professionals', icon: <Users size={20}/>, label: 'Professionals' },{ id: 'facilities', icon: <Building size={20}/>, label: 'Facilities' },{ id: 'payroll', icon: <FileSpreadsheet size={20}/>, label: 'Payroll' },{ id: 'invoicing', icon: <DollarSign size={20}/>, label: 'Invoicing' },{ id: 'comms', icon: <Send size={20}/>, label: 'Communications' },]; const renderView = () => { switch(view) { case 'dashboard': return <AdminDashboard shifts={shifts} professionals={professionals} />; case 'applicants': return <PendingApplicantsView currentUser={currentUser} applicants={professionals.filter(p=>p.role === 'pending_professional')} db={db} />; case 'credentials': return <CredentialVerificationView currentUser={currentUser} professionals={professionals} db={db} />; case 'shifts': return <ShiftsView currentUser={currentUser} shifts={shifts} facilities={facilities} professionals={professionals} db={db} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes} />; case 'professionals': return <ProfessionalsManagementView currentUser={currentUser} professionals={professionals.filter(p=>p.role === 'professional')} db={db} specialtyTypes={specialtyTypes} />; case 'facilities': return <FacilitiesManagementView currentUser={currentUser} facilities={facilities} db={db} />; case 'payroll': return <PayrollView shifts={shifts} professionals={professionals} />; case 'invoicing': return <InvoicingView shifts={shifts} facilities={facilities} />; case 'comms': return <CommunicationsView professionals={professionals} />; default: return <AdminDashboard shifts={shifts} professionals={professionals} />; } }; return (<div className="flex flex-col md:flex-row"><AdminSidebar view={view} setView={setView} navItems={navItems} /><main className="flex-1 md:pl-8 mt-6 md:mt-0">{renderView()}</main></div>);};
const AdminLayout = ({ currentUser, db, shifts, professionals, facilities, credentialTypes, specialtyTypes }) => { const [view, setView] = useState('dashboard'); const navItems = [{ id: 'dashboard', icon: <ClipboardList size={20}/>, label: 'Dashboard' },{ id: 'applicants', icon: <UserCog size={20}/>, label: 'Applicants' },{ id: 'credentials', icon: <ShieldCheck size={20}/>, label: 'Credentials' },{ id: 'shifts', icon: <Clock size={20}/>, label: 'Shifts' },{ id: 'comms', icon: <Send size={20}/>, label: 'Communications' },]; const renderView = () => { switch(view) { case 'dashboard': return <AdminDashboard shifts={shifts} professionals={professionals} />; case 'applicants': return <PendingApplicantsView currentUser={currentUser} applicants={professionals.filter(p=>p.role === 'pending_professional')} db={db} />; case 'credentials': return <CredentialVerificationView currentUser={currentUser} professionals={professionals} db={db} />; case 'shifts': return <ShiftsView currentUser={currentUser} shifts={shifts} facilities={facilities} professionals={professionals} db={db} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes}/>; case 'comms': return <CommunicationsView professionals={professionals} />; default: return <AdminDashboard shifts={shifts} professionals={professionals} />; } }; return (<div className="flex flex-col md:flex-row"><AdminSidebar view={view} setView={setView} navItems={navItems} /><main className="flex-1 md:pl-8 mt-6 md:mt-0">{renderView()}</main></div>);};
const FacilityLayout = ({ db, user, allShifts, professionals, credentialTypes, specialtyTypes }) => { const [view, setView] = useState('shifts'); const myShifts = useMemo(() => allShifts.filter(s => s.facilityId === user.entityId), [allShifts, user.entityId]); const navItems = [{ id: 'shifts', icon: <Clock size={20}/>, label: 'Manage Shifts' },{ id: 'timesheets', icon: <FileSignature size={20}/>, label: 'Approve Timesheets' },]; const renderView = () => { switch(view) { case 'shifts': return <ShiftsView currentUser={user} shifts={myShifts} facilities={[{id: user.entityId, name: user.name}]} professionals={professionals} db={db} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes} />; case 'timesheets': return <TimesheetApprovalView shifts={myShifts} db={db} />; default: return <ShiftsView currentUser={user} shifts={myShifts} facilities={[{id: user.entityId, name: user.name}]} professionals={professionals} db={db} credentialTypes={credentialTypes} specialtyTypes={specialtyTypes} />; } }; return (<div><h2 className="text-3xl font-bold text-gray-800 mb-6">Facility Dashboard: {user.name}</h2><div className="flex flex-col md:flex-row"><AdminSidebar view={view} setView={setView} navItems={navItems} /><main className="flex-1 md:pl-8 mt-6 md:mt-0">{renderView()}</main></div></div>);};
const ProfessionalLayout = ({ db, user, allShifts, allProfessionals, facilities }) => { const [view, setView] = useState('jobs'); const me = useMemo(() => allProfessionals.find(p => p.id === user.entityId), [allProfessionals, user.entityId]); const navItems = [{ id: 'jobs', icon: <Briefcase size={20}/>, label: 'Job Board' },{ id: 'schedule', icon: <Calendar size={20}/>, label: 'My Schedule' },{ id: 'timesheets', icon: <FileSignature size={20}/>, label: 'My Timesheets' },{ id: 'profile', icon: <User size={20}/>, label: 'My Profile' },]; const renderView = () => { if (!me) return <LoadingSpinner />; switch(view) { case 'jobs': return <JobBoardView shifts={allShifts} professional={me} db={db} />; case 'schedule': return <ProfessionalScheduleView shifts={allShifts} professional={me} />; case 'timesheets': return <TimesheetSubmissionView shifts={allShifts} professional={me} db={db} />; case 'profile': return <ProfessionalProfileView professional={me} db={db} />; default: return <JobBoardView shifts={allShifts} professional={me} db={db} />; } }; return (<div className="flex flex-col md:flex-row"><AdminSidebar view={view} setView={setView} navItems={navItems} /><main className="flex-1 md:pl-8 mt-6 md:mt-0">{renderView()}</main></div>);};
const OnboardingLayout = ({ db, applicant, specialtyTypes }) => { if (!applicant) return <LoadingSpinner />; const [step, setStep] = useState(applicant.onboardingStep || 1); const nextStep = async () => { const newStep = step + 1; const profRef = doc(db, `artifacts/${appId}/public/data/professionals`, applicant.id); await updateDoc(profRef, { onboardingStep: newStep }); setStep(newStep); }; return (<div><h2 className="text-3xl font-bold text-gray-800 mb-2">Onboarding</h2><p className="text-gray-500 mb-6">Welcome, {applicant.name}! Complete the steps below to join our team.</p><div className="w-full bg-gray-200 rounded-full h-2.5 mb-8"><div className="bg-blue-800 h-2.5 rounded-full" style={{ width: `${(step/4)*100}%` }}></div></div>{step === 1 && <OnboardingStep1 applicant={applicant} db={db} onComplete={nextStep} specialtyTypes={specialtyTypes} />}{step === 2 && <OnboardingStep2 applicant={applicant} db={db} onComplete={nextStep} />}{step === 3 && <OnboardingStep3 onComplete={nextStep} />}{step === 4 && <OnboardingStep4 />}</div>);};
const OnboardingStep1 = ({ applicant, db, onComplete, specialtyTypes }) => { const handleSubmit = async (e) => { e.preventDefault(); const formData = new FormData(e.target); const profRef = doc(db, `artifacts/${appId}/public/data/professionals`, applicant.id); await updateDoc(profRef, { name: formData.get('name'), specialty: formData.get('specialty'), }); onComplete(); }; return (<Card><h3 className="text-xl font-semibold mb-4">Step 1: Complete Your Profile</h3><form onSubmit={handleSubmit} className="space-y-4"><div><Label htmlFor="name">Full Name</Label><Input id="name" name="name" defaultValue={applicant.name} required /></div><div><Label htmlFor="specialty">Primary Specialty</Label><Select id="specialty" name="specialty" defaultValue={applicant.specialty} required><option value="">Select...</option>{specialtyTypes.map(s => <option key={s.id} value={s.name}>{s.name}</option>)}</Select></div><Button type="submit">Save and Continue</Button></form></Card>); };
const OnboardingStep2 = ({ applicant, db, onComplete }) => (<Card><h3 className="text-xl font-semibold mb-4">Step 2: Upload Credentials</h3><ProfessionalProfileView professional={applicant} db={db} /><Button onClick={onComplete} className="mt-6">I'm Done, Continue</Button></Card>);
const OnboardingStep3 = ({ onComplete }) => { const [agreed, setAgreed] = useState(false); return (<Card><h3 className="text-xl font-semibold mb-4">Step 3: Policies & E-Signature</h3><div className="prose prose-sm border p-4 rounded-md h-64 overflow-y-auto"><h4>Independent Contractor Agreement</h4><p>This Agreement is made between StaffingOS ("Company") and you ("Contractor").</p><p>1. **Services:** Contractor agrees to perform healthcare services...</p><p>2. **Compensation:** Company agrees to pay Contractor for services rendered...</p></div><div className="mt-4 flex items-center"><input id="agree" type="checkbox" checked={agreed} onChange={() => setAgreed(!agreed)} className="h-4 w-4 text-blue-800" /><Label htmlFor="agree" className="ml-2">I have read and agree to the terms.</Label></div><Button onClick={onComplete} disabled={!agreed} className="mt-4">Agree and Continue</Button></Card>); };
const OnboardingStep4 = () => (<Card><div className="text-center"><CheckCircle className="mx-auto h-12 w-12 text-green-500" /><h3 className="mt-2 text-xl font-semibold">Application Submitted!</h3><p className="mt-2 text-gray-600">Thank you! An administrator will review your profile and you will be notified upon activation.</p></div></Card>);
const AdminSidebar = ({ view, setView, navItems }) => ( <nav className="w-full md:w-56 flex-shrink-0"><ul className="flex flex-row md:flex-col gap-1 md:gap-2">{navItems.map(item => (<li key={item.id} className="flex-1 md:flex-initial"><button onClick={() => setView(item.id)} className={`w-full flex items-center justify-center md:justify-start p-3 rounded-lg transition-colors text-left ${view === item.id ? 'bg-blue-800 text-white shadow' : 'text-gray-600 hover:bg-blue-100'}`}><span className="md:mr-3">{item.icon}</span><span className="hidden md:inline font-medium">{item.label}</span></button></li>))}</ul></nav>);
const AdminDashboard = ({ shifts, professionals }) => { const stats = { openShifts: shifts.filter(s => s.status === 'Open').length, pendingApplicants: professionals.filter(p => p.role === 'pending_professional').length, pendingCreds: professionals.reduce((acc, p) => acc + (p.credentials || []).filter(c => getCredentialStatus(c.expiryDate, c.status).status === 'Pending').length, 0), expiringSoon: professionals.reduce((acc, p) => acc + (p.credentials || []).filter(c => getCredentialStatus(c.expiryDate, c.status).status === 'Nearing Expiry').length, 0), }; return (<div><h2 className="text-3xl font-bold text-gray-800 mb-6">Admin Dashboard</h2><div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8"><StatCard icon={<AlertTriangle size={24}/>} title="Open Shifts" value={stats.openShifts} color="amber" /><StatCard icon={<UserCog size={24}/>} title="Pending Applicants" value={stats.pendingApplicants} color="teal" /><StatCard icon={<ShieldCheck size={24}/>} title="Pending Credentials" value={stats.pendingCreds} color="blue" /><StatCard icon={<Clock size={24}/>} title="Expiring Soon" value={stats.expiringSoon} color="orange" /></div></div>); };
const PendingApplicantsView = ({ currentUser, applicants, db }) => { const [selectedApplicant, setSelectedApplicant] = useState(null); const [analysis, setAnalysis] = useState(''); const [isAnalyzing, setIsAnalyzing] = useState(false); const handleApprove = async (applicantId) => { const profRef = doc(db, `artifacts/${appId}/public/data/professionals`, applicantId); await updateDoc(profRef, { role: 'professional', onboardingStep: null, approvedBy: currentUser.name, approvedAt: new Date().toISOString() }); alert('Applicant approved and activated!'); }; const handleAnalyze = async (applicant) => { setSelectedApplicant(applicant); setIsAnalyzing(true); const credentialsText = (applicant.credentials || []).map(c => `- ${c.docName} (Expires: ${c.expiryDate}, Status: ${getCredentialStatus(c.expiryDate, c.status).status})`).join('\n'); const prompt = `Analyze the following healthcare professional applicant and provide a brief summary for an HR manager. Highlight strengths, potential concerns (like missing or expired credentials), and suggest 2-3 key questions to ask during an interview. Format the output in markdown.\n\nApplicant Name: ${applicant.name}\nSpecialty: ${applicant.specialty || 'Not specified'}\nCredentials provided:\n${credentialsText || 'None'}`; const result = await callGeminiAPI(prompt); setAnalysis(result); setIsAnalyzing(false); }; return (<div><h2 className="text-3xl font-bold text-gray-800 mb-6">Pending Applicants</h2><Card>{!applicants || applicants.length === 0 ? (<p className="text-gray-500">No pending applicants.</p>) : (<ul className="divide-y divide-gray-200">{applicants.map(p => (<li key={p.id} className="p-4 flex flex-col sm:flex-row justify-between items-start sm:items-center"><p className="font-semibold">{p.name} <span className="text-sm font-normal text-gray-500">{p.specialty}</span></p><div className="flex gap-2 mt-2 sm:mt-0"><Button onClick={() => handleAnalyze(p)} size="sm" variant="outline" disabled={isAnalyzing && selectedApplicant?.id === p.id}>{isAnalyzing && selectedApplicant?.id === p.id ? 'Analyzing...' : <><Sparkles className="w-4 h-4 mr-2" />Analyze ✨</>}</Button><Button onClick={() => handleApprove(p.id)} size="sm">Approve</Button></div></li>))}</ul>)}</Card>{selectedApplicant && (<Modal onClose={() => setSelectedApplicant(null)}><h3 className="text-xl font-semibold mb-4">AI Analysis for {selectedApplicant.name}</h3>{isAnalyzing ? <LoadingSpinner /> : <div className="prose prose-sm max-w-none" dangerouslySetInnerHTML={{ __html: analysis.replace(/\n/g, '<br/>') }}></div>}</Modal>)}</div>);};
const CredentialVerificationView = ({ currentUser, professionals, db }) => { const [viewingDoc, setViewingDoc] = useState(null); const [denyingCred, setDenyingCred] = useState(null); const [denialReason, setDenialReason] = useState(''); const professionalsWithPendingCreds = useMemo(() => professionals.map(p => ({...p, pendingCredentials: (p.credentials || []).filter(c => c.status === 'Pending')})).filter(p => p.pendingCredentials.length > 0), [professionals]); const updateCredentialStatus = async (profId, credName, status, reason = '') => { const profRef = doc(db, `artifacts/${appId}/public/data/professionals`, profId); const professional = professionals.find(p => p.id === profId); if (!professional) return; const updatedCredentials = professional.credentials.map(cred => { if (cred.docName !== credName) return cred; if (status === 'Verified') { return { ...cred, status: 'Verified', verifiedBy: currentUser.name, verifiedAt: new Date().toISOString(), denialReason: '' }; } else if (status === 'Denied') { return { ...cred, status: 'Denied', deniedBy: currentUser.name, deniedAt: new Date().toISOString(), denialReason: reason }; } return cred; }); await updateDoc(profRef, { credentials: updatedCredentials }); }; const handleDenySubmit = (e) => { e.preventDefault(); if (!denyingCred || !denialReason) return; updateCredentialStatus(denyingCred.profId, denyingCred.cred.docName, 'Denied', denialReason); setDenyingCred(null); setDenialReason(''); }; return (<div><h2 className="text-3xl font-bold text-gray-800 mb-6">Credential Verification</h2><Card>{professionalsWithPendingCreds.length === 0 ? (<p className="text-gray-500">No pending credentials to verify.</p>) : (<ul className="divide-y divide-gray-200">{professionalsWithPendingCreds.map(p => (<li key={p.id} className="p-4"><h3 className="font-semibold text-lg text-gray-800">{p.name} - {p.specialty}</h3><div className="mt-2 space-y-2">{p.pendingCredentials.map(cred => (<div key={cred.docName} className="p-3 bg-gray-50 rounded-md"><div className="flex justify-between items-center"><div><p className="font-medium">{cred.docName}</p><p className="text-sm text-gray-500">Expires: {cred.expiryDate}</p></div><div className="flex gap-2"><Button size="sm" variant="outline" onClick={() => setViewingDoc(cred)}><Eye className="w-4 h-4 mr-2"/>View</Button><Button size="sm" variant="outline" className="text-red-600 hover:bg-red-50 border-red-300 hover:text-red-700" onClick={() => setDenyingCred({profId: p.id, cred})}><XCircle className="w-4 h-4 mr-2"/>Deny</Button><Button size="sm" className="text-green-600 bg-green-100 hover:bg-green-200 hover:text-green-700" onClick={() => updateCredentialStatus(p.id, cred.docName, 'Verified')}><CheckCircle className="w-4 h-4 mr-2"/>Verify</Button></div></div></div>))}</div></li>))}</ul>)}</Card>{viewingDoc && (<Modal onClose={() => setViewingDoc(null)}><h3 className="text-xl font-semibold mb-4">Document: {viewingDoc.docName}</h3><img src={`https://placehold.co/600x800/ccc/333?text=Document+Preview`} alt="Document Preview" className="w-full rounded-md border"/></Modal>)}{denyingCred && (<Modal onClose={() => setDenyingCred(null)}><form onSubmit={handleDenySubmit}><h3 className="text-xl font-semibold mb-4">Deny Credential</h3><p>Denying: <strong>{denyingCred.cred.docName}</strong> for <strong>{professionals.find(p=>p.id===denyingCred.profId).name}</strong></p><div className="mt-4"><Label htmlFor="denialReason">Reason for Denial</Label><textarea id="denialReason" value={denialReason} onChange={(e) => setDenialReason(e.target.value)} rows="3" className="w-full border p-2 rounded" required></textarea></div><div className="mt-4 flex justify-end gap-2"><Button type="button" variant="outline" onClick={() => setDenyingCred(null)}>Cancel</Button><Button type="submit">Submit Denial</Button></div></form></Modal>)}</div>);};
const ProfessionalsManagementView = ({ currentUser, professionals, db, specialtyTypes }) => { const [isAdding, setIsAdding] = useState(false); const [editingProf, setEditingProf] = useState(null); const handleSave = async (e, profId) => { e.preventDefault(); const fd = new FormData(e.target); const data = { name: fd.get('name'), specialty: fd.get('specialty'), contact: fd.get('contact'), lastModifiedAt: new Date().toISOString(), lastModifiedBy: currentUser.name }; if (profId) { await updateDoc(doc(db, `artifacts/${appId}/public/data/professionals`, profId), data); } else { data.createdAt = new Date().toISOString(); data.createdBy = currentUser.name; data.role = 'professional'; data.credentials = []; await addDoc(collection(db, `artifacts/${appId}/public/data/professionals`), data); } setEditingProf(null); setIsAdding(false); }; const handleDelete = async (id) => { if (window.confirm("Are you sure?")) { await deleteDoc(doc(db, `artifacts/${appId}/public/data/professionals`, id)); }}; return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-3xl font-bold">Manage Professionals</h2><Button onClick={() => { setEditingProf(null); setIsAdding(true); }}><PlusCircle className="mr-2 h-4"/>Add Professional</Button></div><Card><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr><th className="p-2">Name</th><th className="p-2">Specialty</th><th className="p-2">Contact</th><th className="p-2">Last Modified</th><th className="p-2">Actions</th></tr></thead><tbody>{professionals.map(p => (<tr key={p.id} className="border-b"><td>{p.name}</td><td>{p.specialty}</td><td>{p.contact}</td><td><div className="text-xs">{p.lastModifiedBy}<br/>{p.lastModifiedAt && new Date(p.lastModifiedAt).toLocaleString()}</div></td><td><div className="flex gap-2"><Button size="sm" variant="outline" onClick={() => setEditingProf(p)}><Edit size={14}/></Button><Button size="sm" variant="outline" className="text-red-600" onClick={() => handleDelete(p.id)}><Trash2 size={14}/></Button></div></td></tr>))}</tbody></table></div></Card>{(isAdding || editingProf) && (<Modal onClose={() => { setIsAdding(false); setEditingProf(null); }}><form onSubmit={(e) => handleSave(e, editingProf?.id)}><h3 className="text-xl font-semibold mb-4">{editingProf ? 'Edit' : 'Add'} Professional</h3><div className="space-y-4"><Input name="name" placeholder="Name" defaultValue={editingProf?.name} required /><Select name="specialty" defaultValue={editingProf?.specialty}>{specialtyTypes.map(s=><option key={s.id}>{s.name}</option>)}</Select><Input name="contact" type="email" placeholder="Email" defaultValue={editingProf?.contact} required /></div><div className="mt-4 flex justify-end gap-2"><Button type="button" variant="outline" onClick={() => {setIsAdding(false); setEditingProf(null);}}>Cancel</Button><Button type="submit">Save</Button></div></form></Modal>)}</div>);};
const FacilitiesManagementView = ({ currentUser, facilities, db }) => { const [isAdding, setIsAdding] = useState(false); const [editingFacility, setEditingFacility] = useState(null); const handleSave = async (e, facilityId) => { e.preventDefault(); const fd = new FormData(e.target); const data = { name: fd.get('name'), address: fd.get('address'), contactPerson: fd.get('contactPerson'), lastModifiedAt: new Date().toISOString(), lastModifiedBy: currentUser.name }; if (facilityId) { await updateDoc(doc(db, `artifacts/${appId}/public/data/facilities`, facilityId), data); } else { data.createdAt = new Date().toISOString(); data.createdBy = currentUser.name; await addDoc(collection(db, `artifacts/${appId}/public/data/facilities`), data); } setEditingFacility(null); setIsAdding(false); }; const handleDelete = async (id) => { if (window.confirm("Are you sure?")) { await deleteDoc(doc(db, `artifacts/${appId}/public/data/facilities`, id)); }}; return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-3xl font-bold">Manage Facilities</h2><Button onClick={() => setIsAdding(true)}><PlusCircle className="mr-2 h-4"/>Add Facility</Button></div><Card><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr><th className="p-2">Name</th><th className="p-2">Address</th><th className="p-2">Last Modified</th><th className="p-2">Actions</th></tr></thead><tbody>{facilities.map(f => (<tr key={f.id} className="border-b"><td>{f.name}</td><td>{f.address}</td><td><div className="text-xs">{f.lastModifiedBy}<br/>{f.lastModifiedAt && new Date(f.lastModifiedAt).toLocaleString()}</div></td><td><div className="flex gap-2"><Button size="sm" variant="outline" onClick={() => setEditingFacility(f)}><Edit size={14}/></Button><Button size="sm" variant="outline" className="text-red-600" onClick={() => handleDelete(f.id)}><Trash2 size={14}/></Button></div></td></tr>))}</tbody></table></div></Card>{(isAdding || editingFacility) && (<Modal onClose={() => { setIsAdding(false); setEditingFacility(null); }}><form onSubmit={(e) => handleSave(e, editingFacility?.id)}><h3 className="text-xl font-semibold mb-4">{editingFacility ? 'Edit' : 'Add'} Facility</h3><div className="space-y-4"><Input name="name" placeholder="Name" defaultValue={editingFacility?.name} required /><Input name="address" placeholder="Address" defaultValue={editingFacility?.address} required /><Input name="contactPerson" placeholder="Contact" defaultValue={editingFacility?.contactPerson} required /></div><div className="mt-4 flex justify-end gap-2"><Button type="button" variant="outline" onClick={() => {setIsAdding(false); setEditingFacility(null);}}>Cancel</Button><Button type="submit">Save</Button></div></form></Modal>)}</div>);};
const CredentialTypesView = ({ currentUser, credentialTypes, db }) => { const [isAdding, setIsAdding] = useState(false); const [editingCredType, setEditingCredType] = useState(null); const handleSave = async (e, credTypeId) => { e.preventDefault(); const fd = new FormData(e.target); const data = { name: fd.get('name'), lastModifiedAt: new Date().toISOString(), lastModifiedBy: currentUser.name }; if (credTypeId) { await updateDoc(doc(db, `artifacts/${appId}/public/data/credentialTypes`, credTypeId), data); } else { data.createdAt = new Date().toISOString(); data.createdBy = currentUser.name; await addDoc(collection(db, `artifacts/${appId}/public/data/credentialTypes`), data); } setEditingCredType(null); setIsAdding(false); }; const handleDelete = async (id) => { if (window.confirm("Are you sure? This could affect existing shifts.")) { await deleteDoc(doc(db, `artifacts/${appId}/public/data/credentialTypes`, id)); }}; return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-3xl font-bold">Manage Credential Types</h2><Button onClick={() => setIsAdding(true)}><PlusCircle className="mr-2 h-4"/>Add Type</Button></div><Card><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr><th className="p-2">Name</th><th className="p-2">Last Modified</th><th className="p-2">Actions</th></tr></thead><tbody>{credentialTypes.map(c => (<tr key={c.id} className="border-b"><td>{c.name}</td><td><div className="text-xs">{c.lastModifiedBy}<br/>{c.lastModifiedAt && new Date(c.lastModifiedAt).toLocaleString()}</div></td><td><div className="flex gap-2"><Button size="sm" variant="outline" onClick={() => setEditingCredType(c)}><Edit size={14}/></Button><Button size="sm" variant="outline" className="text-red-600" onClick={() => handleDelete(c.id)}><Trash2 size={14}/></Button></div></td></tr>))}</tbody></table></div></Card>{(isAdding || editingCredType) && (<Modal onClose={() => { setIsAdding(false); setEditingCredType(null); }}><form onSubmit={(e) => handleSave(e, editingCredType?.id)}><h3 className="text-xl font-semibold mb-4">{editingCredType ? 'Edit' : 'Add'} Credential Type</h3><div className="space-y-4"><Input name="name" placeholder="e.g., CPR Certification" defaultValue={editingCredType?.name} required /></div><div className="mt-4 flex justify-end gap-2"><Button type="button" variant="outline" onClick={() => {setIsAdding(false); setEditingCredType(null);}}>Cancel</Button><Button type="submit">Save</Button></div></form></Modal>)}</div>);};
const SpecialtyTypesView = ({ currentUser, specialtyTypes, db }) => { const [isAdding, setIsAdding] = useState(false); const [editingSpecType, setEditingSpecType] = useState(null); const handleSave = async (e, specTypeId) => { e.preventDefault(); const fd = new FormData(e.target); const data = { name: fd.get('name'), lastModifiedAt: new Date().toISOString(), lastModifiedBy: currentUser.name }; if (specTypeId) { await updateDoc(doc(db, `artifacts/${appId}/public/data/specialtyTypes`, specTypeId), data); } else { data.createdAt = new Date().toISOString(); data.createdBy = currentUser.name; await addDoc(collection(db, `artifacts/${appId}/public/data/specialtyTypes`), data); } setEditingSpecType(null); setIsAdding(false); }; const handleDelete = async (id) => { if (window.confirm("Are you sure? This could affect existing shifts and professionals.")) { await deleteDoc(doc(db, `artifacts/${appId}/public/data/specialtyTypes`, id)); }}; return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-3xl font-bold">Manage Specialty Types</h2><Button onClick={() => setIsAdding(true)}><PlusCircle className="mr-2 h-4"/>Add Type</Button></div><Card><div className="overflow-x-auto"><table className="w-full text-left"><thead><tr><th className="p-2">Name</th><th className="p-2">Last Modified</th><th className="p-2">Actions</th></tr></thead><tbody>{specialtyTypes.map(s => (<tr key={s.id} className="border-b"><td>{s.name}</td><td><div className="text-xs">{s.lastModifiedBy}<br/>{s.lastModifiedAt && new Date(s.lastModifiedAt).toLocaleString()}</div></td><td><div className="flex gap-2"><Button size="sm" variant="outline" onClick={() => setEditingSpecType(s)}><Edit size={14}/></Button><Button size="sm" variant="outline" className="text-red-600" onClick={() => handleDelete(s.id)}><Trash2 size={14}/></Button></div></td></tr>))}</tbody></table></div></Card>{(isAdding || editingSpecType) && (<Modal onClose={() => { setIsAdding(false); setEditingSpecType(null); }}><form onSubmit={(e) => handleSave(e, editingSpecType?.id)}><h3 className="text-xl font-semibold mb-4">{editingSpecType ? 'Edit' : 'Add'} Specialty Type</h3><div className="space-y-4"><Input name="name" placeholder="e.g., Registered Nurse" defaultValue={editingSpecType?.name} required /></div><div className="mt-4 flex justify-end gap-2"><Button type="button" variant="outline" onClick={() => {setIsAdding(false); setEditingSpecType(null);}}>Cancel</Button><Button type="submit">Save</Button></div></form></Modal>)}</div>);};
const CommunicationsView = ({ professionals }) => { const [isSending, setIsSending] = useState(false); const [sendStatus, setSendStatus] = useState(''); const handleSend = async (e) => { e.preventDefault(); setIsSending(true); setSendStatus(''); const formData = new FormData(e.target); const group = formData.get('group'); const message = formData.get('message'); const recipients = professionals.filter(p => p.role === 'professional' && (group === 'all' || p.specialty === group)); const recipientContacts = recipients.map(p => p.contact); setTimeout(() => { setSendStatus(`Message successfully sent to ${recipientContacts.length} professionals.`); setIsSending(false); e.target.reset(); }, 1500); }; return (<div><h2 className="text-3xl font-bold text-gray-800 mb-6">Communications</h2><Card><form onSubmit={handleSend} className="space-y-4"><h3>Send Mass Message</h3><Select name="group"><option value="all">All Professionals</option><option value="RN">RNs</option><option value="LPN">LPNs</option></Select><textarea name="message" rows="5" className="w-full border p-2 rounded" required></textarea><Button type="submit" disabled={isSending}>{isSending ? 'Sending...' : 'Send'}</Button>{sendStatus && <p>{sendStatus}</p>}</form></Card></div>); };
const PayrollView = ({ shifts, professionals }) => { const [startDate, setStartDate] = useState(''); const [endDate, setEndDate] = useState(''); const approvedShifts = useMemo(() => shifts.filter(s => { if (s.status !== 'Timesheet Approved' || !s.shiftDate) return false; const shiftDate = new Date(s.shiftDate); const start = startDate ? new Date(startDate) : null; const end = endDate ? new Date(endDate) : null; if (start && shiftDate < start) return false; if (end && shiftDate > end) return false; return true; }), [shifts, startDate, endDate]); const downloadCSV = () => { let csvContent = "data:text/csv;charset=utf-8,Professional,Specialty,Date,Hours\n"; approvedShifts.forEach(shift => { const p = professionals.find(p => p.id === shift.assignedProfessionalId); csvContent += `${shift.assignedProfessionalName},${p?.specialty || 'N/A'},${shift.shiftDate},${shift.hoursWorked}\n`; }); const encodedUri = encodeURI(csvContent); const link = document.createElement("a"); link.setAttribute("href", encodedUri); link.setAttribute("download", "payroll.csv"); document.body.appendChild(link); link.click(); }; return (<div><h2>Payroll Export</h2><Card className="mb-6"><div className="flex gap-4"><Input type="date" value={startDate} onChange={e => setStartDate(e.target.value)} /><Input type="date" value={endDate} onChange={e => setEndDate(e.target.value)} /></div></Card><Card><Button onClick={downloadCSV} disabled={approvedShifts.length === 0}>Export CSV</Button><ul>{approvedShifts.map(s => <li key={s.id}>{s.assignedProfessionalName}: {s.hoursWorked} hrs</li>)}</ul></Card></div>);};
const InvoicingView = ({ shifts, facilities }) => { const [facilityId, setFacilityId] = useState(''); const [invoice, setInvoice] = useState(null); const generateInvoice = () => { const rate = 30; const shiftsForInvoice = shifts.filter(s => s.status === 'Timesheet Approved' && s.facilityId === facilityId); const totalHours = shiftsForInvoice.reduce((acc, s) => acc + parseFloat(s.hoursWorked || 0), 0); setInvoice({ facility: facilities.find(f => f.id === facilityId), shifts: shiftsForInvoice, totalHours, totalAmount: totalHours * rate, invoiceDate: new Date().toLocaleDateString(), rate }); }; return (<div><h2>Invoicing</h2><Card className="mb-6"><Select value={facilityId} onChange={e => setFacilityId(e.target.value)}><option value="">Select Facility</option>{facilities.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}</Select><Button onClick={generateInvoice} disabled={!facilityId}>Generate</Button></Card>{invoice && <Card><h3>Invoice for {invoice.facility.name}</h3></Card>}</div>);};
const ShiftsView = ({ currentUser, shifts, facilities, professionals, db, credentialTypes, specialtyTypes }) => { const [editingShift, setEditingShift] = useState(null); const [newShift, setNewShift] = useState({ description: '', isRecurring: false, frequency: 'weekly', repetitions: '1', requiredCredentials: [] }); const [isGenerating, setIsGenerating] = useState(false); const handleSaveShift = async (e, shiftId) => { e.preventDefault(); const fd = new FormData(e.target); const fId = fd.get('facilityId'); const selFac = facilities.find(f => f.id === fId); const startDateTime = new Date(fd.get('startDateTime')); const duration = parseFloat(fd.get('duration')); const endDateTime = new Date(startDateTime.getTime() + duration * 60 * 60 * 1000); const data = { facilityId: fId, facilityName: selFac?.name, shiftDate: startDateTime.toISOString().split('T')[0], startTime: startDateTime.toTimeString().substring(0,5), endTime: endDateTime.toTimeString().substring(0,5), specialty: fd.get('specialty'), status: 'Open', applicants: [], description: fd.get('description'), requiredCredentials: newShift.requiredCredentials, lastModifiedAt: new Date().toISOString(), lastModifiedBy: currentUser.name }; if (shiftId) { await updateDoc(doc(db, `artifacts/${appId}/public/data/shifts`, shiftId), data); } else { data.createdAt = new Date().toISOString(); data.createdBy = currentUser.name; if (newShift.isRecurring) { for (let i = 0; i < parseInt(newShift.repetitions); i++) { const newStartDate = new Date(startDateTime); if (newShift.frequency === 'weekly') { newStartDate.setDate(newStartDate.getDate() + 7 * i); } else { newStartDate.setDate(newStartDate.getDate() + i); } await addDoc(collection(db, `artifacts/${appId}/public/data/shifts`), { ...data, shiftDate: newStartDate.toISOString().split('T')[0] }); } } else { await addDoc(collection(db, `artifacts/${appId}/public/data/shifts`), data); } } setEditingShift(null); setNewShift({ description: '', isRecurring: false, frequency: 'weekly', repetitions: '1', requiredCredentials: [] }); }; const handleAssign = async (shiftId, prof) => { await updateDoc(doc(db, `artifacts/${appId}/public/data/shifts`, shiftId), { status: 'Filled', assignedProfessionalId: prof.id, assignedProfessionalName: prof.name, applicants: [] }); }; const handleGenerateDescription = async () => { setIsGenerating(true); const form = document.getElementById('new-shift-form'); const specialty = form.specialty.value; const facilityName = facilities.find(f => f.id === form.facilityId.value)?.name; if (!specialty || !facilityName) { alert("Please select a facility and specialty first."); setIsGenerating(false); return; } const prompt = `Write a compelling, one-paragraph job description for a ${specialty} shift at ${facilityName}. Highlight the opportunity to work with a dedicated team and provide excellent patient care. Keep it concise and professional.`; const result = await callGeminiAPI(prompt); setNewShift({...newShift, description: result }); setIsGenerating(false); }; const handleEdit = (shift) => { setEditingShift(shift); setNewShift({ ...shift, isRecurring: false, requiredCredentials: shift.requiredCredentials || [] }); }; const handleDelete = async (shiftId) => { if(window.confirm('Are you sure you want to delete this shift?')) { await deleteDoc(doc(db, `artifacts/${appId}/public/data/shifts`, shiftId)); } }; const handleCredentialChange = (e) => { const { name, checked } = e.target; setNewShift(prev => { const creds = new Set(prev.requiredCredentials); if(checked) { creds.add(name); } else { creds.delete(name); } return {...prev, requiredCredentials: Array.from(creds)}; }); }; return (<div><div className="flex justify-between items-center mb-6"><h2 className="text-2xl font-bold text-gray-700">Manage Shifts</h2><Button onClick={() => { setEditingShift(null); setNewShift({ description: '', isRecurring: false, frequency: 'weekly', repetitions: '1', requiredCredentials: [] }); }}><PlusCircle className="mr-2 h-4"/>{editingShift ? 'Cancel Edit' : 'Create New Shift'}</Button></div>{(editingShift || !editingShift) && (<Card className="mb-6"><form id="new-shift-form" onSubmit={(e) => handleSaveShift(e, editingShift?.id)} className="space-y-4"><h3>{editingShift ? 'Edit' : 'Create'} Shift</h3><Select name="facilityId" required defaultValue={editingShift?.facilityId || (facilities.length === 1 ? facilities[0].id : '')}>{facilities.map(f => <option key={f.id} value={f.id}>{f.name}</option>)}</Select><Select name="specialty" defaultValue={editingShift?.specialty} required>{specialtyTypes.map(s=><option key={s.id}>{s.name}</option>)}</Select><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><div><Label>Start Date & Time</Label><Input name="startDateTime" type="datetime-local" defaultValue={editingShift ? `${editingShift.shiftDate}T${editingShift.startTime}` : ''} required /></div><div><Label>Duration (hours)</Label><Input name="duration" type="number" step="0.5" defaultValue="8" required /></div></div><div><Label>Required Credentials</Label><div className="grid grid-cols-2 md:grid-cols-3 gap-2 p-2 border rounded-md">{credentialTypes.map(cred => (<Label key={cred.id} className="flex items-center gap-2"><input type="checkbox" name={cred.name} checked={newShift.requiredCredentials.includes(cred.name)} onChange={handleCredentialChange}/>{cred.name}</Label>))}</div></div><div><Label>Description</Label><textarea name="description" rows="3" className="w-full border p-2 rounded" defaultValue={editingShift?.description} onChange={e=>setNewShift({...newShift, description: e.target.value})}></textarea><Button type="button" variant="outline" size="sm" className="mt-2" onClick={handleGenerateDescription} disabled={isGenerating}>{isGenerating ? 'Generating...' : <><Sparkles className="w-4 h-4 mr-2"/>Generate ✨</>}</Button></div>{!editingShift && (<div className="flex items-center gap-2"><input type="checkbox" id="isRecurring" checked={newShift.isRecurring} onChange={e => setNewShift({...newShift, isRecurring: e.target.checked})} /><Label htmlFor="isRecurring">Create recurring shift?</Label></div>)}{newShift.isRecurring && (<div className="grid grid-cols-2 gap-4"><div><Label>Repeats</Label><Select value={newShift.frequency} onChange={e => setNewShift({...newShift, frequency: e.target.value})}><option value="weekly">Weekly</option><option value="daily">Daily</option></Select></div><div><Label>For the next</Label><Input type="number" value={newShift.repetitions} onChange={e => setNewShift({...newShift, repetitions: e.target.value})} min="1" max="52" /></div></div>)}<Button type="submit">{editingShift ? 'Save Changes' : 'Create Shift(s)'}</Button></form></Card>)}{<div className="space-y-4">{shifts.map(shift => (<Card key={shift.id}><div className="flex justify-between items-start"><ShiftListItem shift={shift} /><div className="flex gap-2"><Button size="sm" variant="outline" onClick={() => handleEdit(shift)}><Edit size={14} className="mr-1"/></Button><Button size="sm" variant="outline" className="text-red-600" onClick={() => handleDelete(shift.id)}><Trash2 size={14}/></Button></div></div><p className="text-sm text-gray-600 mt-2">{shift.description}</p><div>{shift.status === 'Open' && (shift.applicants || []).length > 0 && (<div><h4>Applicants:</h4><ul>{(shift.applicants || []).map(appId => { const prof = professionals.find(p => p.id === appId); if (!prof) return null; return (<li key={appId}><span>{prof.name}</span><Button size="sm" onClick={() => handleAssign(shift.id, prof)}>Assign</Button></li>);})}</ul></div>)}{shift.status === 'Filled' && (<p>Assigned: {shift.assignedProfessionalName}</p>)}</div></Card>))}</div>}</div>);};
const TimesheetApprovalView = ({ shifts, db }) => { const pendingShifts = useMemo(() => shifts.filter(s => s.status === 'Timesheet Submitted'), [shifts]); const handleApprove = async (shiftId) => { await updateDoc(doc(db, `artifacts/${appId}/public/data/shifts`, shiftId), { status: 'Timesheet Approved' }); }; return (<div><h2>Approve Timesheets</h2><Card>{pendingShifts.length === 0 ? <p>No timesheets pending.</p> : <ul>{pendingShifts.map(s => <li key={s.id} className="p-4 flex justify-between"><div><p>{s.assignedProfessionalName} - {s.shiftDate}</p><p>{s.hoursWorked} hours</p></div><Button onClick={() => handleApprove(s.id)}>Approve</Button></li>)}</ul>}</Card></div>);};
const ProfessionalProfileView = ({ professional, db }) => { const handleAddCredential = async (e) => { e.preventDefault(); const fd = new FormData(e.target); const file = fd.get('credentialFile'); const newCred = { docName: fd.get('docName'), expiryDate: fd.get('expiryDate'), status: 'Pending', denialReason: '', fileName: file.name }; await updateDoc(doc(db, `artifacts/${appId}/public/data/professionals`, professional.id), { credentials: arrayUnion(newCred) }); e.target.reset(); }; return (<div><Card className="mb-6"><p>Name: {professional.name}</p><p>Specialty: {professional.specialty}</p></Card><div className="grid grid-cols-1 lg:grid-cols-2 gap-8"><Card><h4>Add Credential</h4><form onSubmit={handleAddCredential} className="space-y-4"><Input name="docName" placeholder="Document Name" required /><Input name="expiryDate" type="date" required/><Label htmlFor="credentialFile">Upload Document</Label><Input id="credentialFile" name="credentialFile" type="file" className="file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100" required/><Button type="submit"><UploadCloud className="h-4 w-4 mr-2"/>Add</Button></form></Card><Card><h4>My Credentials</h4><ul>{(professional.credentials || []).map(cred => { const { status, color, icon: IconComponent } = getCredentialStatus(cred.expiryDate, cred.status); return (<li key={cred.docName} className="p-3 border rounded-md"><div><div className="flex justify-between items-center"><div><p className="font-medium">{cred.docName}</p><p className="text-sm text-gray-500">Expires: {cred.expiryDate}</p></div><span className={`flex items-center text-sm font-semibold px-2 py-1 rounded-full ${color}`}><IconComponent size={14} className="mr-1.5"/>{status}</span></div>{cred.status === 'Denied' && (<p className="text-xs text-red-600 mt-2"><strong>Reason:</strong> {cred.denialReason}</p>)}</div></li>);})}</ul></Card></div></div>); };
const JobBoardView = ({ shifts, professional, db }) => { const openShifts = useMemo(() => shifts.filter(s => s.status === 'Open' && s.specialty === professional.specialty), [shifts, professional.specialty]); const checkQualifications = (shift) => { if (!shift.requiredCredentials || shift.requiredCredentials.length === 0) return { qualified: true, missing: [] }; const professionalCreds = (professional.credentials || []).filter(c => c.status === 'Verified').map(c => c.docName); const missing = shift.requiredCredentials.filter(req => !professionalCreds.includes(req)); return { qualified: missing.length === 0, missing }; }; const handleApply = async (shiftId) => { await updateDoc(doc(db, `artifacts/${appId}/public/data/shifts`, shiftId), { applicants: arrayUnion(professional.id) }); }; return (<div><h2>Open Jobs</h2><div className="space-y-4">{openShifts.map(shift => { const { qualified, missing } = checkQualifications(shift); return (<Card key={shift.id}><ShiftListItem shift={shift} /><p className="text-sm my-2">{shift.description}</p>{(shift.applicants || []).includes(professional.id) ? (<span className="font-semibold text-green-600">Applied</span>) : (<Button onClick={() => handleApply(shift.id)} disabled={!qualified}>Apply</Button>)} {!qualified && <p className="text-xs text-red-600 mt-1">Requires: {missing.join(', ')}</p>} </Card>)})}</div></div>);};
const ProfessionalScheduleView = ({ shifts, professional }) => { const myShifts = useMemo(() => shifts.filter(s => s.assignedProfessionalId === professional.id && (s.status === 'Filled' || s.status === 'Completed')), [shifts, professional.id]); return (<div><h2>My Schedule</h2><div className="space-y-4">{myShifts.length > 0 ? myShifts.map(shift => (<Card key={shift.id}><ShiftListItem shift={shift} /><p>Confirmed</p></Card>)) : <p>No upcoming shifts.</p>}</div></div>);};
const TimesheetSubmissionView = ({ shifts, professional, db }) => { const completedShifts = useMemo(() => shifts.filter(s => s.assignedProfessionalId === professional.id && s.status === 'Completed'), [shifts, professional.id]); const handleSubmit = async (e, shiftId) => { e.preventDefault(); const fd = new FormData(e.target); await updateDoc(doc(db, `artifacts/${appId}/public/data/shifts`, shiftId), { status: 'Timesheet Submitted', hoursWorked: fd.get('hours') }); }; return (<div><h2>Submit Timesheets</h2><div className="space-y-4">{completedShifts.length > 0 ? completedShifts.map(shift => (<Card key={shift.id}><ShiftListItem shift={shift} /><form onSubmit={(e) => handleSubmit(e, shift.id)}><Input name="hours" type="number" step="0.1" required/><Button type="submit">Submit</Button></form></Card>)) : <p>No completed shifts to submit.</p>}</div></div>);};
const StatCard = ({ icon, title, value, color }) => { const colors = { yellow: 'bg-yellow-100 text-yellow-800', green: 'bg-green-100 text-green-800', blue: 'bg-blue-100 text-blue-800', purple: 'bg-purple-100 text-purple-800', orange: 'bg-orange-100 text-orange-800', teal: 'bg-teal-100 text-teal-800', amber: 'bg-amber-100 text-amber-800' }; return (<div className="bg-white p-5 rounded-lg shadow-md flex items-center"><div className={`p-3 rounded-full ${colors[color]}`}>{icon}</div><div className="ml-4"><p className="text-sm text-gray-500 font-medium">{title}</p><p className="text-2xl font-bold text-gray-800">{value}</p></div></div>); };
const ShiftListItem = ({ shift }) => (<div><p className="font-semibold text-gray-800">{shift.facilityName}</p><div className="text-sm text-gray-500 flex flex-wrap gap-x-4 gap-y-1 mt-1"><span className="flex items-center"><Calendar className="w-3.5 h-3.5 mr-1.5" />{new Date(shift.shiftDate).toLocaleDateString(undefined, { weekday: 'short', month: 'short', day: 'numeric' })}</span><span className="flex items-center"><Clock className="w-3.5 h-3.5 mr-1.5" />{shift.startTime} - {shift.endTime}</span><span className="flex items-center"><Briefcase className="w-3.5 h-3.5 mr-1.5" />{shift.specialty}</span></div></div>);
const Card = ({ children, className }) => <div className={`bg-white p-6 rounded-lg shadow-md ${className}`}>{children}</div>;
const Button = ({ children, onClick, className = '', variant = 'primary', size = 'md', ...props }) => { const baseStyle = "inline-flex items-center justify-center rounded-md text-sm font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none"; const variants = { primary: 'bg-blue-800 text-white hover:bg-blue-900 focus:ring-blue-500', outline: 'border border-gray-300 bg-transparent hover:bg-gray-100 text-gray-700 focus:ring-gray-500' }; const sizes = { sm: 'px-3 py-1.5 text-xs', md: 'px-4 py-2' }; return <button onClick={onClick} className={`${baseStyle} ${variants[variant]} ${sizes[size]} ${className}`} {...props}>{children}</button>; };
const Input = ({ className, ...props }) => <input className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2 ${className}`} {...props} />;
const Select = ({ children, className, ...props }) => <select className={`block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm p-2 ${className}`} {...props}>{children}</select>;
const Label = ({ children, ...props }) => <label className="block text-sm font-medium text-gray-700 mb-1" {...props}>{children}</label>;
const LoadingSpinner = () => <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-800"></div>;
const ErrorMessage = ({ message }) => <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-md" role="alert"><p className="font-bold">Error</p><p>{message}</p></div>;
const Modal = ({ children, onClose }) => (<div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex justify-center items-center p-4"><div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg relative"><button onClick={onClose} className="absolute top-2 right-2 p-1 rounded-full text-gray-400 hover:bg-gray-200"><X size={20} /></button>{children}</div></div>);

// --- Gemini API Helper ---
async function callGeminiAPI(prompt) {
    const apiKey = ""; // This should be handled by the environment, not stored in code.
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
    const payload = { contents: [{ role: "user", parts: [{ text: prompt }] }] };
    try {
        const response = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
        if (!response.ok) throw new Error(`API call failed with status: ${response.status}`);
        const result = await response.json();
        if (result.candidates && result.candidates[0]?.content?.parts[0]?.text) {
            return result.candidates[0].content.parts[0].text;
        } else {
            const safetyMessage = result.candidates?.[0]?.safetyRatings?.find(r => r.blocked)?.category || 'Unknown reason';
            return `Content generation blocked due to: ${safetyMessage}.`;
        }
    } catch (error) {
        console.error("Gemini API call error:", error);
        return `Error: Could not connect to the AI service. ${error.message}`;
    }
}
const getCredentialStatus = (expiryDateStr, dbStatus = 'Pending') => { if (dbStatus === 'Denied') return { status: 'Denied', color: 'bg-gray-200 text-gray-800', icon: XCircle }; if (dbStatus === 'Verified') { const expiryDate = new Date(expiryDateStr); const today = new Date(); const thirtyDaysFromNow = new Date(); thirtyDaysFromNow.setDate(today.getDate() + 30); if (expiryDate < today) return { status: 'Expired', color: 'bg-red-100 text-red-700', icon: AlertTriangle }; if (expiryDate < thirtyDaysFromNow) return { status: 'Nearing Expiry', color: 'bg-orange-100 text-orange-700', icon: Clock }; return { status: 'Verified', color: 'bg-green-100 text-green-700', icon: CheckCircle }; } return { status: 'Pending', color: 'bg-blue-100 text-blue-800', icon: ShieldCheck }; };
